"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.install = void 0;
const os_1 = __importDefault(require("os"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const child_process_1 = __importDefault(require("child_process"));
function copyScript(scriptName, destDir) {
    fs_1.default.copyFileSync(path_1.default.join(__dirname, '../../scripts', scriptName), path_1.default.join(destDir, scriptName));
}
function install(dir = '.husky') {
    const absoluteHooksDir = path_1.default.resolve(process.cwd(), dir);
    if (!absoluteHooksDir.startsWith(process.cwd())) {
        throw new Error('.. not allowed');
    }
    if (!fs_1.default.existsSync('.git')) {
        throw new Error(".git can't be found");
    }
    const tmpDir = fs_1.default.mkdtempSync(path_1.default.join(os_1.default.tmpdir(), 'husky-'));
    copyScript('husky.sh', tmpDir);
    copyScript('pre-commit', tmpDir);
    fs_1.default.chmodSync(path_1.default.join(tmpDir, 'pre-commit'), 0o0755);
    child_process_1.default.spawnSync('git', ['config', 'core.hooksPath', tmpDir]);
    child_process_1.default.spawnSync('git', ['commit', '--author', 'husky <husky@example.com>'], {
        stdio: 'inherit',
        env: {
            ...process.env,
            husky_dir: dir,
        },
    });
}
exports.install = install;
